name: check build

on:
  pull_request:
    branches:
      - 'rc_*'  # Adjust this pattern to match your rc_ branch naming convention
  
jobs: 
  Check-for-Build:
    runs-on: ubuntu-latest
    permissions:
      # This permission is required for requesting the web token without which you can't access the aws 
      id-token: write 
      contents: read
      # this permission should be set to be able get commits data by curl request
      pull-requests: read
      
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          ref: ${{ github.event.pull_request.head.sha }}
          fetch-depth: 0

      - name: Check for rebase 
        run: |
          BASE_BRANCH=${{ github.event.pull_request.base.ref }}
          echo "BASE_BRANCH: $BASE_BRANCH"
      
          HEAD_SHA=$(git rev-parse HEAD)
          echo "HEAD_SHA: $HEAD_SHA"

          BASE_SHA=$(git rev-parse remotes/origin/$BASE_BRANCH)
          echo "BASE_SHA: $BASE_SHA"

          COMMON_ANCESTOR=$(git merge-base $HEAD_SHA $BASE_SHA)
          echo "COMMON_ANCESTOR: $COMMON_ANCESTOR"

          if [ "$COMMON_ANCESTOR" = "$BASE_SHA" ] ; then
            echo "Branch is up to date. No rebase needed."
          else
            echo "Branch is not up to date. Please rebase before merging."
            exit 1
          fi  

      - name: Check Commit Message is empty or not
        run: |
          # Retrieve the saved commit message from the environment variables
          COMMIT_MESSAGE="$(git show -s --format=%s)"

          # Check if the commit message is empty
          if [[ -z "$COMMIT_MESSAGE" ]]; then
            echo "Commit message is empty. Cannot Merge."
            exit 1  # Terminate the workflow with a status code of 1
          else 
            echo "Commit message present"
          fi
          
      - name: Check head git commit message
        run: |
          # echo "$(git show -s --format=%s)" 
          # Run the git show command and capture its output in an environment variable
          COMMIT_MESSAGE="$(git show -s --format=%s)"
          
          # Check if the commit message contains "CodeBuild"
          if [[ "$COMMIT_MESSAGE" == *CodeBuild* ]]; then
            echo "Commit message contains 'CodeBuild'. Proceeding with workflow."
          else
            echo "Commit message does not contain 'CodeBuild' which is required to start CodeBuild. Exiting workflow."
            exit 1  # Terminate the workflow with a non-zero status code
          fi

          
      